#
# deployment.properties
#

#
# Engine configuration
# 
# Engine settings can be configured with the engine prefix:
# engine.<ini setting>=<value to use>
#
# Examples:
# engine.EmulatorSystem=myhost
# engine.DeviceName=
# engine.DeviceNameSequence=
# engine.DeviceNameSequenceChars=
# engine.DeviceNameSequenceIndicator=
# engine.DeviceNameSequenceMax=
# engine.ServerPort=

#
# Servlet configuration
#
# Servlet settings can be configured with the servlet prefix:
# servlet.<web_xml setting>=<value to use>
#
# Examples:
# servlet.server=myserver
# servlet.port=1234
# servlet.default_theme=
# servlet.SettingsOverridableInJSP=
# servlet.SettingsOverridableInBrowser=BrowserEmbedded,FontUsage,NoSplash,TitleBar,@*
# servlet.allow_session_takeover=true
# servlet.file_upload_timeout=60000
# servlet.clear_image_cache_on_start=false

# When setting servlet.host_api to 'true', configure the three required settings as well: 
# setting: servlet.host_api=[true | false]
# setting: servlet.host_api_access_control_order=[allow-deny | deny-allow]
# setting: servlet.host_api_access_control_allow=(comma separated list of functions to allow, wildcards can be used)
# setting: servlet.host_api_access_control_deny=(comma separated list of functions to deny, wildcards can be used)
# Example:
   servlet.host_api=true
   servlet.host_api_access_control_order=allow-deny
   servlet.host_api_access_control_allow=*
   servlet.host_api_access_control_deny=scriptExec

#
# Custom properties
#
# Other prefixes can be used to create custom categories.
# example:
# custom.some_id=369
#
# All properties can be retrieved using script function GetDeploymentProp().

#
# MFA
#
# Example properties to use for MFA handling as implemented in scripts MFAfunctions.function:
#mfa.url=https://<MFA_Server_Host>:6789/policyPrompt/<policy>
#mfa.timeout=60000
# Enabling the engine.emulator=NULL setting will allow the project templates with MFA included to start with the MFASIGNON page:
#engine.emulator=NULL

#
# Certificate errors
#
# Example for allowing security certificates with security issues
# These should not be used in production environments but can be useful in development environments with certificates that are self-signed, expired or for another domain
#engine.SecureAllowExpiredCertificate=1
#engine.SecureAllowSelfSignedCertificate=1
#engine.SecureAllowOtherCertificateErrors=1
